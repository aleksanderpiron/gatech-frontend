{"version":3,"sources":["components/Clients/ClientsItem.js","components/UI/Sort/Sort.js","components/UI/Input/Input.js","components/Clients/Clients.js","App.js","serviceWorker.js","index.js"],"names":["ClientsItem","clientData","_id","name","email","address","city","street","houseNumber","age","sex","avatar","id","className","src","alt","href","Sort","bgStyles","sortValue","value","direction","setSortValue","activeRef","useRef","content","map","opt","key","ref","onClick","prevValue","sortBgClasses","current","width","offsetWidth","left","offsetLeft","style","Input","change","onChange","e","target","type","onMouseDown","preventDefault","Client","useState","clientsArray","setClientsArray","searchValue","setSearchValue","filterByName","useCallback","updatedClients","ClientsJson","data","filter","toLowerCase","includes","sortBy","arrayToSort","sort","a","b","parseInt","useEffect","updatedArray","clientBodyContent","length","cl","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.00771001.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ClientsItem=({clientData:{_id, name, email, address:{city, street, houseNumber}, age, sex, avatar}})=>{\r\n    return(\r\n        <div id={_id} className=\"client\">\r\n            <div className={sex?\"client__avatar client--female\":\"client__avatar client--male\"}>\r\n                <img src={avatar} alt=\"\"/>\r\n            </div>\r\n            <div className=\"client__info\">\r\n                <p className=\"client__name\">{name}</p>\r\n                <a className='client__mail' href={`mailto:${email}`}>{email}</a>\r\n                <ul className=\"client__details\">\r\n                    <li><span>Age:</span><span>{age}</span></li>\r\n                    <li><span>Gender:</span><span>{sex?'Female':'Male'}</span></li>\r\n                    <li><span>Address:</span><span>{`${street} ${houseNumber}, ${city}`}</span></li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ClientsItem;","import React, { useRef } from 'react';\r\nimport './Sort.scss';\r\n\r\nconst Sort=({sortValue:{value, direction}, setSortValue})=>{\r\n    const changeHandler=(name)=>{\r\n        if(name === value){\r\n            setSortValue((prevValue)=>{\r\n                const {value} = prevValue,\r\n                direction = !prevValue.direction;\r\n                return {value, direction}\r\n            })\r\n        }\r\n        else{\r\n            setSortValue({value:name, direction:true});\r\n        }\r\n    },\r\n    activeRef = useRef(null),\r\n    options = ['default', 'email', 'age'],\r\n    content = options.map(opt=>{\r\n        return <button\r\n        key={`sort_${opt}`}\r\n        ref={opt===value?activeRef:null}\r\n        className={opt===value?\"sort__item sort__item--active\":\"sort__item\"}\r\n        onClick={()=>{changeHandler(opt)}}>\r\n            {opt}\r\n        </button>\r\n    });\r\n    let bgStyles,\r\n    sortBgClasses = \"sort__bg \";\r\n    if(activeRef.current !== null){\r\n        bgStyles ={\r\n            width:`${activeRef.current.offsetWidth}px`,\r\n            left:`${activeRef.current.offsetLeft}px`,\r\n        }\r\n    }\r\n    if(value === 'default'){\r\n        sortBgClasses += 'sort__bg--default '\r\n    }\r\n    if(!direction){\r\n        sortBgClasses += 'sort__bg--descending '\r\n    }\r\n    return(\r\n        <div className=\"sort\">\r\n            <p>Sort by:</p>\r\n            <div className=\"sort__inner\">\r\n                {content}\r\n                <div className={sortBgClasses} style={bgStyles}></div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sort;","import React from 'react';\r\nimport './Input.scss';\r\n\r\nconst Input=({name, value, change, className})=>{\r\n    const click=(e)=>{\r\n        e.preventDefault();\r\n        change('');\r\n    };\r\n    return(\r\n        <label>\r\n            <input\r\n            className={value!==''?className+' filled':className}\r\n            onChange={(e)=>{change(e.target.value)}}\r\n            type=\"text\"\r\n            value={value}\r\n            name={name}/>\r\n            <div className=\"line\"></div>\r\n            <div className=\"clear\" onMouseDown={click}></div>\r\n        </label>\r\n    )\r\n}\r\n\r\nexport default Input;","import React, { useState, useEffect, useCallback } from 'react';\r\nimport ClientsJson from './clients.json';\r\nimport ClientsItem from './ClientsItem';\r\nimport Sort from '../UI/Sort/Sort';\r\nimport Input from '../UI/Input/Input';\r\nimport './Clients.scss';\r\n\r\nconst Client=()=>{\r\n    //State\r\n    const [clientsArray, setClientsArray] = useState([]),\r\n    [searchValue, setSearchValue] = useState(''),\r\n    [sortValue, setSortValue] = useState({value:'default', direction:true}),\r\n\r\n    //Functionalities\r\n\r\n    filterByName=useCallback(()=>{\r\n        let updatedClients = [...ClientsJson.data];\r\n        if(searchValue !== ''){\r\n            updatedClients = updatedClients.filter(({name})=>{\r\n                return name.toLowerCase().includes(searchValue.toLowerCase());\r\n            });\r\n        };\r\n        return updatedClients;\r\n    }, [searchValue]),\r\n\r\n    sortBy=useCallback((arrayToSort)=>{\r\n        let updatedClients = [...arrayToSort];\r\n        const {value, direction} = sortValue;\r\n        switch(value){\r\n            case 'email':\r\n                if(direction){\r\n                    updatedClients = updatedClients.sort((a, b)=>{\r\n                        if(a.email.toLowerCase() < b.email.toLowerCase()) { return -1; }\r\n                        if(a.email.toLowerCase() > b.email.toLowerCase()) { return 1; }\r\n                        return 0;\r\n                    })\r\n                }\r\n                else if(!direction){\r\n                    updatedClients = updatedClients.sort((a, b)=>{\r\n                        if(a.email.toLowerCase() < b.email.toLowerCase()) { return 1; }\r\n                        if(a.email.toLowerCase() > b.email.toLowerCase()) { return -1; }\r\n                        return 0;\r\n                    });\r\n                }\r\n            break;\r\n            case 'age':\r\n                if(direction){\r\n                    updatedClients = updatedClients.sort((a, b)=>{\r\n                        if(parseInt(a.age) < parseInt(b.age)) { return -1; }\r\n                        if(parseInt(a.age) > parseInt(b.age)) { return 1; }\r\n                        return 0;\r\n                    });\r\n                }\r\n                else if(!direction){\r\n                    updatedClients = updatedClients.sort((a, b)=>{\r\n                        if(parseInt(a.age) < parseInt(b.age)) { return 1; }\r\n                        if(parseInt(a.age) > parseInt(b.age)) { return -1; }\r\n                        return 0;\r\n                    });\r\n                }\r\n            break;\r\n            default:\r\n                updatedClients = filterByName();\r\n            break;\r\n        };\r\n        return updatedClients;\r\n    }, [sortValue, filterByName]);\r\n\r\n    //Effects\r\n    useEffect(()=>{\r\n        setClientsArray(ClientsJson.data);\r\n    }, []);\r\n    \r\n        //Filter & sort effect\r\n    useEffect(()=>{\r\n        let updatedArray = filterByName();\r\n        updatedArray = sortBy(updatedArray);\r\n        setClientsArray(updatedArray);\r\n    }, [searchValue, filterByName, sortValue, sortBy]);\r\n\r\n    // Render client items\r\n    let clientBodyContent = <p>Loading...</p>;\r\n    if(clientsArray.length>0){\r\n        clientBodyContent = clientsArray.map(cl=>{\r\n            return <ClientsItem key={cl._id} clientData={cl}/>\r\n        });\r\n    }\r\n    else if(searchValue!=='' && clientsArray.length===0){\r\n        clientBodyContent = <p className=\"client-not-found\">Oops! It looks like client named <span>{searchValue}</span> doesn't exist.<br/> Try with different name.</p> \r\n    }\r\n    return(\r\n        <div className=\"clients\">\r\n            <div className=\"clients__header\">\r\n                <Input \r\n                className='search-input'\r\n                value={searchValue}\r\n                change={setSearchValue}/>\r\n                <Sort \r\n                sortValue={sortValue}\r\n                setSortValue={setSortValue}/>\r\n            </div>\r\n            <div className=\"clients__body\">\r\n                {clientBodyContent}\r\n            </div>\r\n            <div className=\"clients__footer\">\r\n                <p>Made by <a href=\"mailto:pironaleksander@gmail.com\">Aleksander Piron</a></p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Client;","import React from 'react';\nimport Clients from './components/Clients/Clients';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Clients/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}